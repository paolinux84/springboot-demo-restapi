package com.paolo.springboot.repository;

import com.paolo.springboot.entity.Department;
import jakarta.annotation.PostConstruct;
import jakarta.persistence.EntityManagerFactory;
import org.aspectj.lang.annotation.Before;
import org.junit.jupiter.api.*;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.orm.jpa.AutoConfigureTestEntityManager;
import org.springframework.boot.test.autoconfigure.orm.jpa.DataJpaTest;
import org.springframework.boot.test.autoconfigure.orm.jpa.TestEntityManager;
import org.springframework.test.annotation.DirtiesContext;
import org.springframework.test.context.event.annotation.BeforeTestClass;
import org.springframework.transaction.annotation.Transactional;

import static org.junit.jupiter.api.Assertions.*;
import java.util.Optional;

//Nota che i test sono eseguiti in transazioni diverse perche @DataJpaTest include @Transactional
//QUESTO pero' non riguarda le SEQUENCE! Che non possono essere rollbackate!


@DataJpaTest
class DepartmentRepositoryTest {

    @Autowired
    private DepartmentRepository repository;

    @Autowired
    TestEntityManager tem;

    @BeforeEach
    void setUp() {
        printTransactionId();
        Department department = Department.builder()
                //.departmentId(1L) --> My ERROR! Do not pass ID if is Autogenerated by Hibernate
                .name("Informatik")
                .code("ME - 011")
                .address("Novara")
                .build();
        tem.persist(department);
    }


    @Test
    void whenFindById_thenReturnDepartment() {
        printTransactionId();
        Optional<Department> result = repository.findById(2L);

        assertTrue(result.isPresent());
        assertEquals(result.get().getName(), "Informatik");
    }


    @Test
    void whenSearchingCustomDeparment_thenReturnDepartment(){
        printTransactionId();
        Department result = repository.findCustomMethod();
        assertEquals(result.getName(), "Informatik");
    }

    void printTransactionId(){
        System.out.println(tem.getEntityManager().getTransaction().hashCode());
    }






}